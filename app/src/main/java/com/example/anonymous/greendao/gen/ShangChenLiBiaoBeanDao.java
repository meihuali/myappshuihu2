package com.example.anonymous.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.xiao.myappshuihu.entity.ShangChenLiBiaoBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SHANG_CHEN_LI_BIAO_BEAN".
*/
public class ShangChenLiBiaoBeanDao extends AbstractDao<ShangChenLiBiaoBean, Long> {

    public static final String TABLENAME = "SHANG_CHEN_LI_BIAO_BEAN";

    /**
     * Properties of entity ShangChenLiBiaoBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Titale = new Property(1, String.class, "titale", false, "TITALE");
        public final static Property Address = new Property(2, String.class, "address", false, "ADDRESS");
        public final static Property Freeshipping = new Property(3, String.class, "Freeshipping", false, "FREESHIPPING");
        public final static Property Money = new Property(4, String.class, "money", false, "MONEY");
        public final static Property Fukuanrenshu = new Property(5, String.class, "fukuanrenshu", false, "FUKUANRENSHU");
        public final static Property IsGroupSelected = new Property(6, boolean.class, "isGroupSelected", false, "IS_GROUP_SELECTED");
        public final static Property IsEditing = new Property(7, boolean.class, "isEditing", false, "IS_EDITING");
        public final static Property IsChildSelected = new Property(8, boolean.class, "isChildSelected", false, "IS_CHILD_SELECTED");
        public final static Property Price = new Property(9, String.class, "price", false, "PRICE");
        public final static Property Number = new Property(10, String.class, "number", false, "NUMBER");
        public final static Property PdtDesc = new Property(11, String.class, "pdtDesc", false, "PDT_DESC");
    }


    public ShangChenLiBiaoBeanDao(DaoConfig config) {
        super(config);
    }
    
    public ShangChenLiBiaoBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SHANG_CHEN_LI_BIAO_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TITALE\" TEXT," + // 1: titale
                "\"ADDRESS\" TEXT," + // 2: address
                "\"FREESHIPPING\" TEXT," + // 3: Freeshipping
                "\"MONEY\" TEXT," + // 4: money
                "\"FUKUANRENSHU\" TEXT," + // 5: fukuanrenshu
                "\"IS_GROUP_SELECTED\" INTEGER NOT NULL ," + // 6: isGroupSelected
                "\"IS_EDITING\" INTEGER NOT NULL ," + // 7: isEditing
                "\"IS_CHILD_SELECTED\" INTEGER NOT NULL ," + // 8: isChildSelected
                "\"PRICE\" TEXT," + // 9: price
                "\"NUMBER\" TEXT," + // 10: number
                "\"PDT_DESC\" TEXT);"); // 11: pdtDesc
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SHANG_CHEN_LI_BIAO_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ShangChenLiBiaoBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String titale = entity.getTitale();
        if (titale != null) {
            stmt.bindString(2, titale);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(3, address);
        }
 
        String Freeshipping = entity.getFreeshipping();
        if (Freeshipping != null) {
            stmt.bindString(4, Freeshipping);
        }
 
        String money = entity.getMoney();
        if (money != null) {
            stmt.bindString(5, money);
        }
 
        String fukuanrenshu = entity.getFukuanrenshu();
        if (fukuanrenshu != null) {
            stmt.bindString(6, fukuanrenshu);
        }
        stmt.bindLong(7, entity.getIsGroupSelected() ? 1L: 0L);
        stmt.bindLong(8, entity.getIsEditing() ? 1L: 0L);
        stmt.bindLong(9, entity.getIsChildSelected() ? 1L: 0L);
 
        String price = entity.getPrice();
        if (price != null) {
            stmt.bindString(10, price);
        }
 
        String number = entity.getNumber();
        if (number != null) {
            stmt.bindString(11, number);
        }
 
        String pdtDesc = entity.getPdtDesc();
        if (pdtDesc != null) {
            stmt.bindString(12, pdtDesc);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ShangChenLiBiaoBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String titale = entity.getTitale();
        if (titale != null) {
            stmt.bindString(2, titale);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(3, address);
        }
 
        String Freeshipping = entity.getFreeshipping();
        if (Freeshipping != null) {
            stmt.bindString(4, Freeshipping);
        }
 
        String money = entity.getMoney();
        if (money != null) {
            stmt.bindString(5, money);
        }
 
        String fukuanrenshu = entity.getFukuanrenshu();
        if (fukuanrenshu != null) {
            stmt.bindString(6, fukuanrenshu);
        }
        stmt.bindLong(7, entity.getIsGroupSelected() ? 1L: 0L);
        stmt.bindLong(8, entity.getIsEditing() ? 1L: 0L);
        stmt.bindLong(9, entity.getIsChildSelected() ? 1L: 0L);
 
        String price = entity.getPrice();
        if (price != null) {
            stmt.bindString(10, price);
        }
 
        String number = entity.getNumber();
        if (number != null) {
            stmt.bindString(11, number);
        }
 
        String pdtDesc = entity.getPdtDesc();
        if (pdtDesc != null) {
            stmt.bindString(12, pdtDesc);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ShangChenLiBiaoBean readEntity(Cursor cursor, int offset) {
        ShangChenLiBiaoBean entity = new ShangChenLiBiaoBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // titale
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // address
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Freeshipping
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // money
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // fukuanrenshu
            cursor.getShort(offset + 6) != 0, // isGroupSelected
            cursor.getShort(offset + 7) != 0, // isEditing
            cursor.getShort(offset + 8) != 0, // isChildSelected
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // price
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // number
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // pdtDesc
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ShangChenLiBiaoBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitale(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAddress(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFreeshipping(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMoney(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFukuanrenshu(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIsGroupSelected(cursor.getShort(offset + 6) != 0);
        entity.setIsEditing(cursor.getShort(offset + 7) != 0);
        entity.setIsChildSelected(cursor.getShort(offset + 8) != 0);
        entity.setPrice(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setNumber(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setPdtDesc(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ShangChenLiBiaoBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ShangChenLiBiaoBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ShangChenLiBiaoBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
