package com.example.anonymous.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.xiao.myappshuihu.entity.ZDYData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ZDYDATA".
*/
public class ZDYDataDao extends AbstractDao<ZDYData, Long> {

    public static final String TABLENAME = "ZDYDATA";

    /**
     * Properties of entity ZDYData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MACHINE_ID = new Property(1, String.class, "MACHINE_ID", false, "MACHINE__ID");
        public final static Property ZDY_ID = new Property(2, String.class, "ZDY_ID", false, "ZDY__ID");
        public final static Property ZDY_NAME = new Property(3, String.class, "ZDY_NAME", false, "ZDY__NAME");
        public final static Property ZDY_ISDE = new Property(4, int.class, "ZDY_ISDE", false, "ZDY__ISDE");
        public final static Property ZDY_SW = new Property(5, String.class, "ZDY_SW", false, "ZDY__SW");
        public final static Property ZDY_TIME = new Property(6, String.class, "ZDY_TIME", false, "ZDY__TIME");
        public final static Property ZDY_TIME1 = new Property(7, String.class, "ZDY_TIME1", false, "ZDY__TIME1");
        public final static Property ZDY_ISOPEN = new Property(8, int.class, "ZDY_ISOPEN", false, "ZDY__ISOPEN");
        public final static Property ZDY_ISZF = new Property(9, String.class, "ZDY_ISZF", false, "ZDY__ISZF");
        public final static Property ZDY_IMAGE = new Property(10, String.class, "ZDY_IMAGE", false, "ZDY__IMAGE");
        public final static Property ZDY_ErWeiMa = new Property(11, String.class, "ZDY_ErWeiMa", false, "ZDY__ER_WEI_MA");
        public final static Property ZDY_IS_BOIL = new Property(12, String.class, "ZDY_IS_BOIL", false, "ZDY__IS__BOIL");
        public final static Property ZDY_IS_PURIFY = new Property(13, String.class, "ZDY_IS_PURIFY", false, "ZDY__IS__PURIFY");
        public final static Property ZDY_PURIFY_TIME = new Property(14, String.class, "ZDY_PURIFY_TIME", false, "ZDY__PURIFY__TIME");
        public final static Property ZDY_KEEPWARN_TIME = new Property(15, String.class, "ZDY_KEEPWARN_TIME", false, "ZDY__KEEPWARN__TIME");
    }


    public ZDYDataDao(DaoConfig config) {
        super(config);
    }
    
    public ZDYDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ZDYDATA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"MACHINE__ID\" TEXT," + // 1: MACHINE_ID
                "\"ZDY__ID\" TEXT," + // 2: ZDY_ID
                "\"ZDY__NAME\" TEXT," + // 3: ZDY_NAME
                "\"ZDY__ISDE\" INTEGER NOT NULL ," + // 4: ZDY_ISDE
                "\"ZDY__SW\" TEXT," + // 5: ZDY_SW
                "\"ZDY__TIME\" TEXT," + // 6: ZDY_TIME
                "\"ZDY__TIME1\" TEXT," + // 7: ZDY_TIME1
                "\"ZDY__ISOPEN\" INTEGER NOT NULL ," + // 8: ZDY_ISOPEN
                "\"ZDY__ISZF\" TEXT," + // 9: ZDY_ISZF
                "\"ZDY__IMAGE\" TEXT," + // 10: ZDY_IMAGE
                "\"ZDY__ER_WEI_MA\" TEXT," + // 11: ZDY_ErWeiMa
                "\"ZDY__IS__BOIL\" TEXT," + // 12: ZDY_IS_BOIL
                "\"ZDY__IS__PURIFY\" TEXT," + // 13: ZDY_IS_PURIFY
                "\"ZDY__PURIFY__TIME\" TEXT," + // 14: ZDY_PURIFY_TIME
                "\"ZDY__KEEPWARN__TIME\" TEXT);"); // 15: ZDY_KEEPWARN_TIME
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ZDYDATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ZDYData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String MACHINE_ID = entity.getMACHINE_ID();
        if (MACHINE_ID != null) {
            stmt.bindString(2, MACHINE_ID);
        }
 
        String ZDY_ID = entity.getZDY_ID();
        if (ZDY_ID != null) {
            stmt.bindString(3, ZDY_ID);
        }
 
        String ZDY_NAME = entity.getZDY_NAME();
        if (ZDY_NAME != null) {
            stmt.bindString(4, ZDY_NAME);
        }
        stmt.bindLong(5, entity.getZDY_ISDE());
 
        String ZDY_SW = entity.getZDY_SW();
        if (ZDY_SW != null) {
            stmt.bindString(6, ZDY_SW);
        }
 
        String ZDY_TIME = entity.getZDY_TIME();
        if (ZDY_TIME != null) {
            stmt.bindString(7, ZDY_TIME);
        }
 
        String ZDY_TIME1 = entity.getZDY_TIME1();
        if (ZDY_TIME1 != null) {
            stmt.bindString(8, ZDY_TIME1);
        }
        stmt.bindLong(9, entity.getZDY_ISOPEN());
 
        String ZDY_ISZF = entity.getZDY_ISZF();
        if (ZDY_ISZF != null) {
            stmt.bindString(10, ZDY_ISZF);
        }
 
        String ZDY_IMAGE = entity.getZDY_IMAGE();
        if (ZDY_IMAGE != null) {
            stmt.bindString(11, ZDY_IMAGE);
        }
 
        String ZDY_ErWeiMa = entity.getZDY_ErWeiMa();
        if (ZDY_ErWeiMa != null) {
            stmt.bindString(12, ZDY_ErWeiMa);
        }
 
        String ZDY_IS_BOIL = entity.getZDY_IS_BOIL();
        if (ZDY_IS_BOIL != null) {
            stmt.bindString(13, ZDY_IS_BOIL);
        }
 
        String ZDY_IS_PURIFY = entity.getZDY_IS_PURIFY();
        if (ZDY_IS_PURIFY != null) {
            stmt.bindString(14, ZDY_IS_PURIFY);
        }
 
        String ZDY_PURIFY_TIME = entity.getZDY_PURIFY_TIME();
        if (ZDY_PURIFY_TIME != null) {
            stmt.bindString(15, ZDY_PURIFY_TIME);
        }
 
        String ZDY_KEEPWARN_TIME = entity.getZDY_KEEPWARN_TIME();
        if (ZDY_KEEPWARN_TIME != null) {
            stmt.bindString(16, ZDY_KEEPWARN_TIME);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ZDYData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String MACHINE_ID = entity.getMACHINE_ID();
        if (MACHINE_ID != null) {
            stmt.bindString(2, MACHINE_ID);
        }
 
        String ZDY_ID = entity.getZDY_ID();
        if (ZDY_ID != null) {
            stmt.bindString(3, ZDY_ID);
        }
 
        String ZDY_NAME = entity.getZDY_NAME();
        if (ZDY_NAME != null) {
            stmt.bindString(4, ZDY_NAME);
        }
        stmt.bindLong(5, entity.getZDY_ISDE());
 
        String ZDY_SW = entity.getZDY_SW();
        if (ZDY_SW != null) {
            stmt.bindString(6, ZDY_SW);
        }
 
        String ZDY_TIME = entity.getZDY_TIME();
        if (ZDY_TIME != null) {
            stmt.bindString(7, ZDY_TIME);
        }
 
        String ZDY_TIME1 = entity.getZDY_TIME1();
        if (ZDY_TIME1 != null) {
            stmt.bindString(8, ZDY_TIME1);
        }
        stmt.bindLong(9, entity.getZDY_ISOPEN());
 
        String ZDY_ISZF = entity.getZDY_ISZF();
        if (ZDY_ISZF != null) {
            stmt.bindString(10, ZDY_ISZF);
        }
 
        String ZDY_IMAGE = entity.getZDY_IMAGE();
        if (ZDY_IMAGE != null) {
            stmt.bindString(11, ZDY_IMAGE);
        }
 
        String ZDY_ErWeiMa = entity.getZDY_ErWeiMa();
        if (ZDY_ErWeiMa != null) {
            stmt.bindString(12, ZDY_ErWeiMa);
        }
 
        String ZDY_IS_BOIL = entity.getZDY_IS_BOIL();
        if (ZDY_IS_BOIL != null) {
            stmt.bindString(13, ZDY_IS_BOIL);
        }
 
        String ZDY_IS_PURIFY = entity.getZDY_IS_PURIFY();
        if (ZDY_IS_PURIFY != null) {
            stmt.bindString(14, ZDY_IS_PURIFY);
        }
 
        String ZDY_PURIFY_TIME = entity.getZDY_PURIFY_TIME();
        if (ZDY_PURIFY_TIME != null) {
            stmt.bindString(15, ZDY_PURIFY_TIME);
        }
 
        String ZDY_KEEPWARN_TIME = entity.getZDY_KEEPWARN_TIME();
        if (ZDY_KEEPWARN_TIME != null) {
            stmt.bindString(16, ZDY_KEEPWARN_TIME);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ZDYData readEntity(Cursor cursor, int offset) {
        ZDYData entity = new ZDYData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // MACHINE_ID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // ZDY_ID
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // ZDY_NAME
            cursor.getInt(offset + 4), // ZDY_ISDE
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // ZDY_SW
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // ZDY_TIME
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // ZDY_TIME1
            cursor.getInt(offset + 8), // ZDY_ISOPEN
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // ZDY_ISZF
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // ZDY_IMAGE
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // ZDY_ErWeiMa
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // ZDY_IS_BOIL
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // ZDY_IS_PURIFY
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // ZDY_PURIFY_TIME
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15) // ZDY_KEEPWARN_TIME
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ZDYData entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMACHINE_ID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setZDY_ID(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setZDY_NAME(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setZDY_ISDE(cursor.getInt(offset + 4));
        entity.setZDY_SW(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setZDY_TIME(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setZDY_TIME1(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setZDY_ISOPEN(cursor.getInt(offset + 8));
        entity.setZDY_ISZF(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setZDY_IMAGE(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setZDY_ErWeiMa(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setZDY_IS_BOIL(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setZDY_IS_PURIFY(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setZDY_PURIFY_TIME(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setZDY_KEEPWARN_TIME(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ZDYData entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ZDYData entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ZDYData entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
